
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.4.1
 * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
 */
Prisma.prismaVersion = {
  client: "6.4.1",
  engine: "a9055b89e58b4b5bfb59600785423b1db3d0e75d"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  avatar: 'avatar',
  createdAt: 'createdAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  is_deleted: 'is_deleted',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DonorScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  nick_name: 'nick_name',
  last_name: 'last_name',
  organization_name: 'organization_name',
  unit_number: 'unit_number',
  street_address: 'street_address',
  city: 'city',
  total_donation_amount: 'total_donation_amount',
  total_pledge: 'total_pledge',
  largest_gift_amount: 'largest_gift_amount',
  largest_gift_appeal: 'largest_gift_appeal',
  last_gift_amount: 'last_gift_amount',
  last_gift_request: 'last_gift_request',
  last_gift_appeal: 'last_gift_appeal',
  first_gift_date: 'first_gift_date',
  last_gift_date: 'last_gift_date',
  pmm: 'pmm',
  exclude: 'exclude',
  deceased: 'deceased',
  contact_phone_type: 'contact_phone_type',
  phone_restrictions: 'phone_restrictions',
  email_restrictions: 'email_restrictions',
  communication_restrictions: 'communication_restrictions',
  subscription_events_in_person: 'subscription_events_in_person',
  subscription_events_magazine: 'subscription_events_magazine',
  communication_preference: 'communication_preference',
  is_deleted: 'is_deleted',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DonorTagScalarFieldEnum = {
  donor_id: 'donor_id',
  tag_id: 'tag_id',
  created_at: 'created_at'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  date: 'date',
  location: 'location',
  status: 'status',
  donor_count: 'donor_count',
  is_deleted: 'is_deleted',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by'
};

exports.Prisma.DonorEventScalarFieldEnum = {
  donor_id: 'donor_id',
  event_id: 'event_id',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  username: 'username',
  email: 'email',
  password: 'password',
  avatar: 'avatar'
};

exports.Prisma.TagOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color'
};

exports.Prisma.DonorOrderByRelevanceFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  nick_name: 'nick_name',
  last_name: 'last_name',
  organization_name: 'organization_name',
  unit_number: 'unit_number',
  street_address: 'street_address',
  largest_gift_appeal: 'largest_gift_appeal',
  last_gift_request: 'last_gift_request',
  last_gift_appeal: 'last_gift_appeal',
  pmm: 'pmm',
  phone_restrictions: 'phone_restrictions',
  email_restrictions: 'email_restrictions',
  communication_restrictions: 'communication_restrictions'
};

exports.Prisma.DonorTagOrderByRelevanceFieldEnum = {
  donor_id: 'donor_id',
  tag_id: 'tag_id'
};

exports.Prisma.EventOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  location: 'location',
  created_by: 'created_by'
};

exports.Prisma.DonorEventOrderByRelevanceFieldEnum = {
  donor_id: 'donor_id',
  event_id: 'event_id'
};
exports.City = exports.$Enums.City = {
  Victoria: 'Victoria',
  Nanaimo: 'Nanaimo',
  Courtenay: 'Courtenay',
  Parksville: 'Parksville',
  Campbell_River: 'Campbell_River',
  Saanich: 'Saanich',
  Vancouver: 'Vancouver',
  Surrey: 'Surrey',
  Burnaby: 'Burnaby',
  Richmond: 'Richmond',
  North_Vancouver: 'North_Vancouver',
  White_Rock: 'White_Rock',
  Coquitlam: 'Coquitlam',
  West_Vancouver: 'West_Vancouver',
  New_Westminster: 'New_Westminster',
  Prince_George: 'Prince_George',
  Williams_Lake: 'Williams_Lake',
  Delta: 'Delta',
  Abbotsford: 'Abbotsford',
  Maple_Ridge: 'Maple_Ridge',
  Kelowna: 'Kelowna',
  Langley: 'Langley',
  Port_Coquitlam: 'Port_Coquitlam',
  Vernon: 'Vernon',
  Kamloops: 'Kamloops',
  Salmon_Arm: 'Salmon_Arm'
};

exports.ContactPhoneType = exports.$Enums.ContactPhoneType = {
  Home: 'Home',
  Work: 'Work',
  Mobile: 'Mobile'
};

exports.SubscriptionPreference = exports.$Enums.SubscriptionPreference = {
  Opt_out: 'Opt_out',
  Opt_in: 'Opt_in'
};

exports.CommunicationPreference = exports.$Enums.CommunicationPreference = {
  Thank_you: 'Thank_you',
  Magazine: 'Magazine',
  Inspiration_event: 'Inspiration_event',
  Newsletter: 'Newsletter',
  Survey: 'Survey',
  Holiday_Card: 'Holiday_Card',
  Event: 'Event',
  Appeal: 'Appeal',
  Research_update: 'Research_update'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  draft: 'draft',
  published: 'published',
  archived: 'archived'
};

exports.ParticipationStatus = exports.$Enums.ParticipationStatus = {
  invited: 'invited',
  confirmed: 'confirmed',
  declined: 'declined'
};

exports.Prisma.ModelName = {
  User: 'User',
  Tag: 'Tag',
  Donor: 'Donor',
  DonorTag: 'DonorTag',
  Event: 'Event',
  DonorEvent: 'DonorEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
